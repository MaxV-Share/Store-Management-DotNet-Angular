// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using App.Models.DbContexts;

#nullable disable

namespace App.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211211041336_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Models.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float")
                        .HasColumnName("discount_price");

                    b.Property<double?>("PaymentAmount")
                        .HasColumnType("float")
                        .HasColumnName("payment_amount");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<string>("UserPaymentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_payment_id");

                    b.HasKey("Id")
                        .HasName("pk_bills");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_bills_customer_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_bills_id");

                    b.HasIndex("UserPaymentId")
                        .HasDatabaseName("ix_bills_user_payment_id");

                    b.ToTable("bills", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("bill_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float")
                        .HasColumnName("discount_price");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_bill_details");

                    b.HasIndex("BillId")
                        .HasDatabaseName("ix_bill_details_bill_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_bill_details_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_bill_details_product_id");

                    b.ToTable("bill_details", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_categories_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_categories_parent_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.CategoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("LangId")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("lang_id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_category_details");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_category_details_category_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_category_details_id");

                    b.HasIndex("LangId")
                        .HasDatabaseName("ix_category_details_lang_id");

                    b.ToTable("category_details", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Command", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_commands");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_commands_id");

                    b.ToTable("commands", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.CommandInFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CommandId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("command_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("FunctionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("function_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_command_in_function");

                    b.HasIndex("CommandId")
                        .HasDatabaseName("ix_command_in_function_command_id");

                    b.HasIndex("FunctionId")
                        .HasDatabaseName("ix_command_in_function_function_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_command_in_function_id");

                    b.ToTable("command_in_function", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthday");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_customers_id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("from_date");

                    b.Property<double?>("MaxDiscountPrice")
                        .HasColumnType("float")
                        .HasColumnName("max_discount_price");

                    b.Property<int?>("PercentDiscount")
                        .HasColumnType("int")
                        .HasColumnName("percent_discount");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("to_date");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_discounts_id");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Function", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("parent_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_functions");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_functions_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_functions_parent_id");

                    b.ToTable("functions", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Lang", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_langs");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_langs_id");

                    b.ToTable("langs", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CommandId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("command_id");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("FunctionId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("function_id");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id1");

                    b.Property<string>("RoleUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_user_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("CommandId")
                        .HasDatabaseName("ix_permissions_command_id");

                    b.HasIndex("FunctionId")
                        .HasDatabaseName("ix_permissions_function_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_permissions_id");

                    b.HasIndex("RoleUserId", "RoleId1")
                        .HasDatabaseName("ix_permissions_role_user_id_role_id1");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<double?>("MaxDiscountPrice")
                        .HasColumnType("float")
                        .HasColumnName("max_discount_price");

                    b.Property<int?>("PercentDiscount")
                        .HasColumnType("int")
                        .HasColumnName("percent_discount");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_products_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("create_by");

                    b.Property<string>("Deleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("LangId")
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("lang_id");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("update_by");

                    b.HasKey("Id")
                        .HasName("pk_product_details");

                    b.HasIndex("Id")
                        .HasDatabaseName("ix_product_details_id");

                    b.HasIndex("LangId")
                        .HasDatabaseName("ix_product_details_lang_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_details_product_id");

                    b.ToTable("product_details", (string)null);
                });

            modelBuilder.Entity("App.Models.Entities.Bill", b =>
                {
                    b.HasOne("App.Models.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bills_customers_customer_id");

                    b.HasOne("App.Models.Entities.Identities.User", "UserPayment")
                        .WithMany()
                        .HasForeignKey("UserPaymentId")
                        .HasConstraintName("fk_bills_users_user_payment_id");

                    b.Navigation("Customer");

                    b.Navigation("UserPayment");
                });

            modelBuilder.Entity("App.Models.Entities.BillDetail", b =>
                {
                    b.HasOne("App.Models.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bill_details_bills_bill_id");

                    b.HasOne("App.Models.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bill_details_products_product_id");

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Models.Entities.Category", b =>
                {
                    b.HasOne("App.Models.Entities.Category", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_categories_categories_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("App.Models.Entities.CategoryDetail", b =>
                {
                    b.HasOne("App.Models.Entities.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_details_categories_category_id");

                    b.HasOne("App.Models.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .HasConstraintName("fk_category_details_langs_lang_id");

                    b.Navigation("Category");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("App.Models.Entities.CommandInFunction", b =>
                {
                    b.HasOne("App.Models.Entities.Command", "Command")
                        .WithMany("CommandInFunctions")
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_command_in_function_commands_command_id");

                    b.HasOne("App.Models.Entities.Function", "Function")
                        .WithMany("CommandInFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_command_in_function_functions_function_id");

                    b.Navigation("Command");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("App.Models.Entities.Function", b =>
                {
                    b.HasOne("App.Models.Entities.Function", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_functions_functions_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.RoleClaim", b =>
                {
                    b.HasOne("App.Models.Entities.Identities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserClaim", b =>
                {
                    b.HasOne("App.Models.Entities.Identities.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserLogin", b =>
                {
                    b.HasOne("App.Models.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserRole", b =>
                {
                    b.HasOne("App.Models.Entities.Identities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("App.Models.Entities.Identities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.UserToken", b =>
                {
                    b.HasOne("App.Models.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("App.Models.Entities.Permission", b =>
                {
                    b.HasOne("App.Models.Entities.Command", "Command")
                        .WithMany()
                        .HasForeignKey("CommandId")
                        .HasConstraintName("fk_permissions_commands_command_id");

                    b.HasOne("App.Models.Entities.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId")
                        .HasConstraintName("fk_permissions_functions_function_id");

                    b.HasOne("App.Models.Entities.Identities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUserId", "RoleId1")
                        .HasConstraintName("fk_permissions_user_roles_role_temp_id");

                    b.Navigation("Command");

                    b.Navigation("Function");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Models.Entities.Product", b =>
                {
                    b.HasOne("App.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_products_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Models.Entities.ProductDetail", b =>
                {
                    b.HasOne("App.Models.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .HasConstraintName("fk_product_details_langs_lang_id");

                    b.HasOne("App.Models.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_details_products_product_id");

                    b.Navigation("Lang");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Models.Entities.Bill", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("App.Models.Entities.Category", b =>
                {
                    b.Navigation("CategoryDetails");
                });

            modelBuilder.Entity("App.Models.Entities.Command", b =>
                {
                    b.Navigation("CommandInFunctions");
                });

            modelBuilder.Entity("App.Models.Entities.Function", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("CommandInFunctions");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("App.Models.Entities.Identities.User", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("App.Models.Entities.Product", b =>
                {
                    b.Navigation("ProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
